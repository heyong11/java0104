<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--开启注解扫描器-->
    <context:component-scan base-package="com.peihua"></context:component-scan>
    <!--配置数据源： -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/mybatis"/>
        <property name="user" value="root"></property>
        <property name="password" value="root"></property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>
    <!--事务配置管理器：作用类似于 TransactionManager，定义事务的基本操作 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--事务属性的配置-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!--
               属性详解：
               isolation：默认隔离级别
               read-only ：是否只读， 查询操作可以设置为只读， 提高效率。 写操作必须是false
               timeout： 设置事务的超时时间 -1 ，永不超时。 200 单位S
               propagation： 事务的传播行为： required
              rollback-for： 指定一个异常类型，如果发生了指定的异常类型，就会回滚操作。
              no-rollback-for：指定一个异常类型， 如果遇到了该异常， 不会滚。
            -->
            <tx:method name="transfer" isolation="DEFAULT" read-only="false" timeout="-1" propagation="REQUIRED"  />
            <tx:method name="find*" isolation="DEFAULT" read-only="true" timeout="-1" propagation="REQUIRED"  />
        </tx:attributes>
    </tx:advice>

    <!--aop配置-->
    <aop:config>
        <aop:pointcut id="pointCut2" expression="execution(* com.peihua.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut2"></aop:advisor>
    </aop:config>

    <!--<tx:annotation-driven transaction-manager="txManager"/>-->
    <!--这个是开启注解模式，使用后可以在业务层使用@Transactional就已经把事务交给spring容器管理了-->
</beans>